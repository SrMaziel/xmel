@inject IInfraccionesCiudadanoService infraccionesciudadanoService;
@inject ICiudadanoService ciudadanoService;
@inject IInfraccionesService infraccionesService;


<EditForm Model="infraccionesciudadano" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>

    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Ciudadano</span>
        <InputSelect class="form-select" @bind-Value="infraccionesciudadano.Ciudadano">
            <option value="0">Seleccionar Ciudadano...</option>
            @foreach (var item in listaCiudadano)
            {
                <option value="@item.Idciudadano">@item.Nombre</option>
            }
        </InputSelect>
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Infracciones</span>
        <InputSelect class="form-select" @bind-Value="infraccionesciudadano.Infracciones">
            <option value="0">Seleccionar Infracciones...</option>
            @foreach (var item in listaInfracciones)
            {
                <option value="@item.Idinfracciones">@item.Infracciones</option>
            }
        </InputSelect>
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Costomulta</span>
        <InputText type="text" class="form-control" @bind-Value="infraccionesciudadano.Costomulta" placeholder="Agregar Costomulta"></InputText>
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Estado</span>
        <input type="hidden" value="@infraccionesciudadano.Estado" />
    </div>

    <br />

    <button type="submit" class="btn btn-success">@btnTexto</button>

</EditForm>

@code {

    [Parameter]
    public int idInfraccionesciudadano { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    //----------------------------------------------------------------------------------

    InfraccionesCiudadanoDTO infraccionesciudadano = new InfraccionesCiudadanoDTO();

    List<CiudadanoDTO> listaCiudadano = new List<CiudadanoDTO>();

    List<InfraccionesDTO> listaInfracciones = new List<InfraccionesDTO>();

    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    //----------------------------------------------------------------------------------

    protected override async Task OnInitializedAsync()
    {
        if (idInfraccionesciudadano != 0)
        {
            infraccionesciudadano = await infraccionesciudadanoService.Buscar(idInfraccionesciudadano);
            btnTexto = "Actualizar";
            titulo = "Editar Infraccion";
        }
        else
        {
            btnTexto = "Agregar";
            titulo = "Agregar Infraccion";
            infraccionesciudadano.Estado = 1;
        }

        listaCiudadano = await ciudadanoService.Lista();
        listaInfracciones = await infraccionesService.Lista();

    }
    private async Task OnValidSubmit()
    {
        string ValorDevuelto = "";

        if (idInfraccionesciudadano == 0)
        {
            ValorDevuelto = await infraccionesciudadanoService.Guardar(infraccionesciudadano);
        }
        else
        {
            ValorDevuelto = await infraccionesciudadanoService.Editar(infraccionesciudadano, idInfraccionesciudadano);
        }

        if (ValorDevuelto == "Ejecucion Correcta")
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(ValorDevuelto));
        }
    }
}
