@inject IDocumentoCiudadanoService documentociudadanoService;
@inject ICiudadanoService ciudadanoService;
@inject ITipoDocumentoService tipodocumentoService;

<EditForm Model="documentociudadano" OnValidSubmit="OnValidSubmit">

    <DataAnnotationsValidator></DataAnnotationsValidator>
    
    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Ciudadano</span>
        <InputSelect class="form-select" @bind-Value="documentociudadano.Ciudadano">
            <option value="0">Seleccionar Ciudadano...</option>
            @foreach (var item in listaCiudadano)
            {
                <option value="@item.Idciudadano">@item.Nombre</option>
            }
        </InputSelect>
    </div>

    <div class="input-group mb-3">
        <span class="input-group-text" id="basic-addon1">Tipo Documento</span>
        <InputSelect class="form-select" @bind-Value="documentociudadano.Tipodocumento">
            <option value="0">Seleccionar Tipodocumento...</option>
            @foreach (var item in listaTipodocumento)
            {
                <option value="@item.Idtipodocumentos">@item.Tipodocumentos</option>
            }
        </InputSelect>
   
    </div>

    <h5>Estado documentociudadano</h5>

    <div class="input-group mb-3">
        <div style="margin-right: 15px;">
            <input type="radio" id="activo" name="estado" value="1" @onchange="(() => SetEstado(1))" checked="@((documentociudadano.Estado == 1))" />
            <label for="activo">Activo</label>
        </div>

        <div>
            <input type="radio" id="inactivo" name="estado" value="0" @onchange="(() => SetEstado(0))" checked="@((documentociudadano.Estado == 0))" />
            <label for="inactivo">Inactivo</label>
        </div>

    </div>

    <button type="submit" class="btn btn-success">@btnTexto</button>

</EditForm>


@code {
    
    [Parameter]
    public int idDocumentociudadano { get; set; } = 0;

    string titulo = string.Empty;
    string btnTexto = string.Empty;

    //----------------------------------------------------------------------------------

    DocumentoCiudadanoDTO documentociudadano = new DocumentoCiudadanoDTO();

    List<CiudadanoDTO> listaCiudadano = new List<CiudadanoDTO>();

    List<TipodocumentoDTO> listaTipodocumento = new List<TipodocumentoDTO>();


    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; } = default!;

    //----------------------------------------------------------------------------------

    private void SetEstado(byte estado)
    {
        documentociudadano.Estado = estado;
    }

    protected override async Task OnInitializedAsync()
    {
        if (idDocumentociudadano != 0)
        {
            documentociudadano = await documentociudadanoService.Buscar(idDocumentociudadano);
            btnTexto = "Actualizar";
            titulo = "Editar documento";
        }
        else
        {
            btnTexto = "Agregar";
            titulo = "Agregar documento";
            documentociudadano.Estado = 1;
        }

        listaCiudadano = await ciudadanoService.Lista();
        listaTipodocumento = await tipodocumentoService.Lista();
        
    }

    private async Task OnValidSubmit()
    {
        string ValorDevuelto = "";

        if (idDocumentociudadano == 0)
        {
            ValorDevuelto = await documentociudadanoService.Guardar(documentociudadano);
        }
        else
        {
            ValorDevuelto = await documentociudadanoService.Editar(documentociudadano, idDocumentociudadano);
        }

        if (ValorDevuelto == "Ejecucion Correcta")
        {
            await BlazoredModal.CloseAsync(ModalResult.Ok(ValorDevuelto));
        }

    }
}
